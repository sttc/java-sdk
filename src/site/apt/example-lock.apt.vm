 ------
 Locks at Stateful.co
 ------
 Yegor Bugayenko
 ------
 2014-06-13
 ------

~~ This source file is subject to the new BSD license that is bundled
~~ with this package in the file LICENSE.txt. It is also available
~~ through the world-wide-web at this URL: https://www.stateful.co/LICENSE.txt
~~ If you did not receive a copy of the license and are unable to
~~ obtain it through the world-wide-web, please send an email
~~ to license@stateful.co so we can send you a copy immediately.
~~
~~ THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
~~ "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
~~ LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
~~ FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
~~ COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
~~ INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
~~ BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
~~ OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
~~ AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
~~ OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
~~ OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
~~ OF SUCH DAMAGE.

Locks at Stateful.co

  For example, you need a lock available online and shared among multiple
  processes running on different nodes in the network. Here is how you
  do it in Java, using this SDK:

+--
import co.stateful.Counter;
import co.stateful.Counters;
import co.stateful.Sttc;
import co.stateful.RtSttc;
import com.jcabi.urn.URN;
public class Main {
  public static void main(String... args) throws Exception {
    Sttc sttc = new RtSttc(
      new URN("urn:github:526301"),
      "9FF3-41E0-73FB-F900"
    );
    Lock lock = sttc.locks().get("my-test-lock");
    new Atomic<Void>(
      new Callable<Void>() {
        @Override
        public Void call() {
          System.out.println("this call is synchronized");
        }
      },
      lock
    ).call();
  }
}
+--

  If you want to use
  {{{http://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html}<<<Runnable>>>}}
  instead, try static method
  {{{http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html}<<<java.util.concurrent.Executors#callable(Runnable)>>>}}.
  If you want to avoid checked exceptions, try
  {{{http://tempusfugitlibrary.org/apidocs/com/google/code/tempusfugit/concurrency/Callable.html}<<<Callable>>>}}
  from {{{http://tempusfugitlibrary.org/}tempusfugitlibrary.org}}.
